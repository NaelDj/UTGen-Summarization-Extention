Your task is to generate a test summary between the [CODE] and [/CODE] tags. Your summary should be like the summaries on top of the tests between the [DEMONSTRATION] and [/DEMONSTRATION] tags in terms of size and content. 
Please put your test summary between [SUMMARY] and [/SUMMARY] tags.

[DEMONSTRATION 1]
	@Test
	void abstractRefreshableWAC_fallsBackToInitParam() {
		XmlWebApplicationContext ctx = new XmlWebApplicationContext();
		//ctx.setConfigLocation("programmatic.xml"); // nothing set programmatically
		ContextLoaderListener cll = new ContextLoaderListener(ctx);

		MockServletContext sc = new MockServletContext();
		sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "from-init-param.xml");

		assertThatExceptionOfType(Throwable.class).isThrownBy(() ->
				cll.contextInitialized(new ServletContextEvent(sc)))
			.withMessageEndingWith("ServletContext resource [/from-init-param.xml]");
	}

    [SUMMARY]
    	/**
	 * If setConfigLocation has not been called explicitly against the application context,
	 * then fall back to the ContextLoaderListener init-param if present.
	 */
    [/SUMMARY]

[/DEMONSTRATION 1]

[DEMONSTRATION 2]
  @Test
  public void testSemgrexFilter() throws IOException {
    String expected="{ \"sentences\": [ true, false ]}".replaceAll(" ", "");

    String query = "The dog ate a fish.  He went home.";
    byte[] message = query.getBytes("utf-8");
    Properties props = new Properties();
    props.setProperty("annotators", "tokenize,ssplit,pos,parse");
    String queryParams = String.format("pattern=%s&properties=%s&filter=true",
                                       URLEncoder.encode("{}=verb >obj {}=obj", "utf-8"),
                                       URLEncoder.encode(PropertiesUtils.propsAsJsonString(props), "utf-8"));
    URL serverURL = new URL("http", "localhost", port, "/semgrex?" + queryParams);
    String response = slurpURL(serverURL, message);

    Assert.assertEquals(expected, response.replaceAll(" ", "").replaceAll("\n", ""));
  }

    [SUMMARY]
  /**
   * The first sentence should match this query, but the second one should not.
   */
    [/SUMMARY]
[/DEMONSTRATION 2]

[DEMONSTRATION 3]
  @Test
  public void longCycle() {
    LongCycleComponent longCycleComponent = DaggerLongCycle_LongCycleComponent.create();
    assertThat(longCycleComponent.class1()).isNotNull();
  }

    [SUMMARY]
  /**
   * Tests a cycle long enough that the real factory is created in a separate initialize method from
   * the delegate factory.
   */
    [/SUMMARY]
[/DEMONSTRATION 3]

[CODE]
1. @Test
2. public void test3() throws Throwable {
3.   Rational rational0 = new Rational(1L, 3215L);
4.   Rational rational1 = rational0.abs();
5.   assertEquals(1L, rational0.numerator);
6.   assertEquals(3215L, rational0.denominator);
7.   assertEquals(3.11041E-4F, rational1.floatValue(), 0.01F);
8. }
[/CODE]